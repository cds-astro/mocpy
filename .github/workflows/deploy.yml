name: publish-mocpy-wheels
on:
  push:
    tags:
       - v*
jobs:
  # Linux is specifi because of manylinux, we have to use a docker file 
  build-linux64-wheels:
    runs-on: ubuntu-latest
    # CentOS 7 64 bits Docker Hub image that 'build-linux-wheels' executes in.
    # See https://github.com/pypa/manylinux for this particular container:
    # * CPython 3.5, 3.6, 3.7, 3.8 and 3.9, installed in /opt/python/<python tag>-<abi tag>
    container: quay.io/pypa/manylinux2014_x86_64
    steps:
     - name: "Checkout the full project"
       uses: actions/checkout@v1
     - name: "Install Rust"
       run: |
         curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
     - name: "Build and publish wheels"
       shell: bash
       env:
        MATURIN_USERNAME: ${{ secrets.PYPI_USERNAME_FXP }}
        MATURIN_PASSWORD: ${{ secrets.PYPI_PASSWORD_FXP }}
       run: |
         source $HOME/.cargo/env
         for PYBIN in /opt/python/cp3[6789]*/bin; do
           "${PYBIN}/pip" install maturin
           # --skip-existing is a recent option, not yet in the binaries!
           "${PYBIN}/maturin" publish -i "${PYBIN}/python" --no-sdist --manylinux 2014 --username "$MATURIN_USERNAME"
         done

  # Linux is specifi because of manylinux, we have to use a docker file 
  build-linux32-wheels:
    runs-on: ubuntu-latest
    # CentOS 7 32 bits Docker Hub image that 'build-linux-wheels' executes in.
    # See https://github.com/pypa/manylinux for this particular container:
    # * CPython 3.5, 3.6, 3.7, 3.8 and 3.9, installed in /opt/python/<python tag>-<abi tag>
    container: quay.io/pypa/manylinux2014_i686
    steps:
     - name: "Checkout the full project"
       uses: actions/checkout@v1
     - name: "Install Rust"
       run: |
         curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --default-host i686-unknown-linux-gnu -y
     - name: "Build and publish wheels"
       shell: bash
       env:
        MATURIN_USERNAME: ${{ secrets.PYPI_USERNAME_FXP }}
        MATURIN_PASSWORD: ${{ secrets.PYPI_PASSWORD_FXP }}
       run: |
         source $HOME/.cargo/env
         for PYBIN in /opt/python/cp3[6789]*/bin; do
           "${PYBIN}/pip" install maturin
           # --skip-existing is a recent option, not yet in the binaries!
           "${PYBIN}/maturin" publish -i "${PYBIN}/python" --no-sdist --manylinux 2014 --username "$MATURIN_USERNAME"
         done 

  build-macos-and-windows-wheels:      
    runs-on: ${{ matrix.os }}
    strategy:
      # Run all matrix jobs even if on is failling (default behaviour is to stop all jobs)
      # To be changed when option --skip-existing will be available in maturin
      fail-fast: false      
      matrix:
        os: [windows-latest, macOS-latest]
        python-version: [3.6, 3.7, 3.8, 3.9]
    steps:
     - uses: actions/checkout@v2
     - name: Set up Python ${{ matrix.python-version }} on ${{ matrix.os }}
       uses: actions/setup-python@v2
       with:
         python-version: ${{ matrix.python-version }}
     - name: Build and publish wheel for Python ${{ matrix.python-version }} on ${{ matrix.os }}
       # We do not use environement variable for user, because it seems that the way of providing it in the command
       # line is not the same for macos and for windows. We should create 2 different actions (see 
       # https://docs.github.com/en/actions/reference/encrypted-secrets )
       env:
        MATURIN_PASSWORD: ${{ secrets.PYPI_PASSWORD_FXP }}
       run: |
         #python3 -m pip install maturin
         pip install maturin
         # --skip-existing is a recent option, not yet in the binaries!
         maturin publish --interpreter python${{matrix.python_version}} --no-sdist --username fxpineau 

  deploy-doc:
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout branch ${{ github.head_ref }}"
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
      - name: "Set up Python 3.6 on Ubuntu"
        uses: actions/setup-python@v2
        with:
          python-version: 3.6
      - name: "Build doc"
        run: |
          # Build the doc
          # - Install virtualenv     
          pip install virtualenv
          # - Create and activate a new virtualenv
          virtualenv mocpy-env
          source mocpy-env/bin/activate
          # - Install maturin
          pip install maturin
          # - Build and install mocpy
          maturin develop --release
          # - Install dependencies needed to run benches
          pip install -r requirements-doc.txt
          # - Build the doc: once done, it is in docs/_build/html/
          cd ./docs
          make html
          cd ..
          # Switch of the virtualenv
          deactivate
      - name: "Publish doc on github pages (commit on branch gh-pages)"
        uses: JamesIves/github-pages-deploy-action@4.1.0
        with:
          branch: gh-pages
          folder: docs/_build/html/
        
