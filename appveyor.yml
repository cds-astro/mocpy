environment:
  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\appveyor\\run_with_env.cmd"
    TWINE_USERNAME: bmatthieu3
    # Note: TWINE_PASSWORD is set in Appveyor settings
    CIBW_BEFORE_BUILD: pip install setuptools-rust
  matrix:
    # Nightly 32-bit MSVC
    - channel: nightly
      target: i686-pc-windows-msvc
      PYTHON: "C:\\Python35"
      PYTHON_VERSION: "3.5.x"
      PYTHON_ARCH: "32"
      CIBW_SKIP: "*win_amd64* cp27-* cp33-* cp34-* cp36-* cp37-*"
    - channel: nightly
      target: i686-pc-windows-msvc
      PYTHON: "C:\\Python36"
      PYTHON_VERSION: "3.6.x"
      PYTHON_ARCH: "32"
      CIBW_SKIP: "*win_amd64* cp27-* cp33-* cp34-* cp35-* cp37-*"
    - channel: nightly
      target: i686-pc-windows-msvc
      PYTHON: "C:\\Python37"
      PYTHON_VERSION: "3.7.x"
      PYTHON_ARCH: "32"
      CIBW_SKIP: "*win_amd64* cp27-* cp33-* cp34-* cp35-* cp36-*"
    # Nightly 64-bit MSVC
    - channel: nightly
      target: x86_64-pc-windows-msvc
      PYTHON: "C:\\Python35-x64"
      PYTHON_VERSION: "3.5.x"
      PYTHON_ARCH: "64"
      CIBW_SKIP: "*win32* cp27-* cp33-* cp34-* cp36-* cp37-*"
    - channel: nightly
      target: x86_64-pc-windows-msvc
      PYTHON: "C:\\Python36-x64"
      PYTHON_VERSION: "3.6.x"
      PYTHON_ARCH: "64"
      CIBW_SKIP: "*win32* cp27-* cp33-* cp34-* cp35-* cp37-*"
    - channel: nightly
      target: x86_64-pc-windows-msvc
      PYTHON: "C:\\Python37-x64"
      PYTHON_VERSION: "3.7.x"
      PYTHON_ARCH: "64"
      CIBW_SKIP: "*win32* cp27-* cp33-* cp34-* cp35-* cp36-*"

install:
  # Install cargo. See: https://github.com/starkat99/appveyor-rust/blob/master/appveyor.yml
  - appveyor DownloadFile https://win.rustup.rs/ -FileName rustup-init.exe
  - rustup-init -yv --default-toolchain nightly --default-host %target%
  - set PATH=%PATH%;%USERPROFILE%\.cargo\bin
  - rustc -vV
  - cargo -vV
  # Set the path so that the good python version is chosen
  - "%PYTHON%\\python.exe -m pip install cibuildwheel==0.11.1"
  - set PATH=%PYTHON%;%PATH%
  - set PATH=%PYTHON%\\Scripts;%PATH%

build_script:
  # Install python dependencies for compiling
  # the dynamic library and run the tests
  - "%PYTHON%\\python.exe -m pip install -r requirements/contributing.txt"
  # Compile the dynamic library (.pyd on Windows env)
  - "%PYTHON%\\python.exe -m pip install setuptools setuptools_rust"
  - "%PYTHON%\\python.exe setup.py build_rust"
  # Copy the generated library to the python files location
  - xcopy "build\lib\mocpy\*.pyd" mocpy /sy

test_script:
  - "%PYTHON%\\python.exe -m pytest -v mocpy"

after_test:
  - ps: |
      if ($env:APPVEYOR_REPO_TAG -eq $true)
      {
        cibuildwheel --output-dir dist
        python -m pip install twine
        # Upload to PyPI if the tests succeed
        python -m twine upload "dist\\*.whl" --skip-existing
      }

artifacts:
  - path: "dist\\*.whl"
    name: Wheels

